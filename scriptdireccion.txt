CREATE DATABASE direccion;
USE direccion;

CREATE TABLE municipios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    clave_municipio VARCHAR(10) NOT NULL,
    nombre VARCHAR(100) NOT NULL
);

CREATE TABLE validacion (
    id_validacion INT AUTO_INCREMENT PRIMARY KEY,
    nuc_sim VARCHAR(20),
    curp VARCHAR(18) NOT NULL,
    fecha_consulta DATETIME NOT NULL,
    municipio VARCHAR(100) NOT NULL,
    tipo_predio ENUM('URBANO','RURAL') NOT NULL,
    superficie_total DECIMAL(10,2) NULL 
    sup_has DECIMAL(10,2) NULL 
);

CREATE TABLE crear_numero (
    id_numero INT AUTO_INCREMENT PRIMARY KEY,
    validacion_id INT NOT NULL,  -- Se relaciona con la validaci√≥n en lugar del pre-registro
    numero_incremental INT NOT NULL,
    nuc VARCHAR(11) UNIQUE, 
    FOREIGN KEY (validacion_id) REFERENCES validacion(id_validacion) ON DELETE CASCADE
);


CREATE TABLE ingresos (
    id_nuc INT AUTO_INCREMENT PRIMARY KEY,
    fecha DATE NOT NULL,
    nuc VARCHAR(11) NOT NULL,
    nuc_sim VARCHAR(11) NOT NULL,
    municipio VARCHAR(100) NOT NULL,
    localidad VARCHAR(100) NOT NULL,
    promovente VARCHAR(100) NOT NULL,
    referencia_pago VARCHAR(50) NOT NULL,
    tipo_predio VARCHAR(25) NOT NULL,
    tipo_tramite VARCHAR(25) NOT NULL,
    direccion VARCHAR(100) NOT NULL,
    denominacion VARCHAR(100) NOT NULL,
    superficie_total DECIMAL(10,2),
    sup_has VARCHAR(50),
    superficie_construida DOUBLE,
    forma_valorada VARCHAR(100),
    procedente INT,
    estado INT
(agregar los id de crear_numero y de validacion)
);

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    area_id int,
    role_id int
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    full_name VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    status ENUM('active','inactive') DEFAULT 'active',
    FOREIGN KEY (area_id) REFERENCES areas(area_id),
    FOREIGN KEY (role_id) REFERENCES roles(role_id)
);

CREATE TABLE roles (
    role_id INT AUTO_INCREMENT PRIMARY KEY,
    role_name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE user_roles (
    user_id INT NOT NULL,
    role_id INT NOT NULL,
    PRIMARY KEY (user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (role_id) REFERENCES roles(role_id)
);

CREATE TABLE permisos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    permiso_consultar TINYINT(1) DEFAULT 0,
    permiso_ingresar TINYINT(1) DEFAULT 0,
    permiso_capturar TINYINT(1) DEFAULT 0,
    permiso_baja TINYINT(1) DEFAULT 0,
    procesos TINYINT(1) DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


CREATE TABLE historiales (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nuc_id INT NOT NULL,
    area_origen VARCHAR(50) NOT NULL,
    area_destino VARCHAR(50) NOT NULL,
    comentario TEXT,
    fecha_movimiento TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    usuario_id INT NOT NULL,
    FOREIGN KEY (nuc_id) REFERENCES cuartaentrega(id_nuc),
    FOREIGN KEY (usuario_id) REFERENCES users(id)
);

CREATE TABLE areas (
    area_id INT AUTO_INCREMENT PRIMARY KEY,
    nombre_area VARCHAR(100) NOT NULL UNIQUE,
    descripcion TEXT
);
ALTER TABLE users 
ADD CONSTRAINT fk_users_areas 
FOREIGN KEY (area_id) REFERENCES areas(area_id)
ON DELETE SET NULL
ON UPDATE CASCADE;

